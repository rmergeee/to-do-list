(()=>{"use strict";var e={56:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},72:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var a={},s=[],i=0;i<e.length;i++){var c=e[i],d=r.base?c[0]+r.base:c[0],l=a[d]||0,A="".concat(d," ").concat(l);a[d]=l+1;var u=n(A),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)t[u].references++,t[u].updater(p);else{var m=o(p,r);r.byIndex=i,t.splice(i,0,{identifier:A,updater:m,references:1})}s.push(A)}return s}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var s=0;s<a.length;s++){var i=n(a[s]);t[i].references--}for(var c=r(e,o),d=0;d<a.length;d++){var l=n(a[d]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}a=c}}},113:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},208:(e,t,n)=>{n.d(t,{A:()=>i});var r=n(354),o=n.n(r),a=n(314),s=n.n(a)()(o());s.push([e.id,"@import url(https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.min.css);"]),s.push([e.id,"main {\n    width: 100vw;\n    min-height: 100vh;\n    display: flex;\n}\n\n.nav-menu {\n    display: flex;\n    flex-direction: column;\n    min-width: 360px;\n    max-width: 400px;\n    padding: 2rem;\n    justify-content: start;\n\n    h1 {\n        align-self: center;\n    }\n\n    .menuList {\n        display: flex;\n        flex-direction: column;\n        align-items: start;\n\n        li {\n            a {\n                display: flex;\n                align-items: center;\n                gap: 1rem;\n                justify-content: start;\n\n                img {\n                    width: 1.5rem;\n                }\n            }\n        }\n    }\n\n    #projectList {\n        display: flex;\n        width: 100%;\n        align-items: center;\n        justify-content: center;\n        flex-direction: column;\n    }\n}\n\n.line {\n    background-color: #969ea6;\n    width: 1px;\n    flex: 0 0 1;\n}\n\ndialog {\n    form {\n        article {\n            footer {\n                display: flex;\n                align-items: center;\n                gap: 1rem;\n                #comfirmBtn,\n                #comfirmBtnProject {\n                    margin: 0;\n                }\n            }\n        }\n    }\n}\n\n.invalid {\n    border: 2px solid red;\n}\n\n.content {\n    flex: 1;\n    padding: 2rem;\n    overflow-x: hidden;\n    max-width: 100%;\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n\n    .task {\n        border-radius: 10px;\n        padding: 1rem;\n        max-width: 100%;\n        box-sizing: border-box;\n\n        .taskDesc {\n            overflow: hidden;\n            text-overflow: ellipsis;\n            white-space: nowrap;\n        }\n    }\n}\n\n@media (max-width: 768px) {\n    main {\n        flex-direction: column;\n    }\n\n    .nav-menu {\n        max-width: 100%;\n        border-bottom: 1px solid #ccc;\n    }\n\n    .line {\n        display: none;\n    }\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAEA;IACI,YAAY;IACZ,iBAAiB;IACjB,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,gBAAgB;IAChB,gBAAgB;IAChB,aAAa;IACb,sBAAsB;;IAEtB;QACI,kBAAkB;IACtB;;IAEA;QACI,aAAa;QACb,sBAAsB;QACtB,kBAAkB;;QAElB;YACI;gBACI,aAAa;gBACb,mBAAmB;gBACnB,SAAS;gBACT,sBAAsB;;gBAEtB;oBACI,aAAa;gBACjB;YACJ;QACJ;IACJ;;IAEA;QACI,aAAa;QACb,WAAW;QACX,mBAAmB;QACnB,uBAAuB;QACvB,sBAAsB;IAC1B;AACJ;;AAEA;IACI,yBAAyB;IACzB,UAAU;IACV,WAAW;AACf;;AAEA;IACI;QACI;YACI;gBACI,aAAa;gBACb,mBAAmB;gBACnB,SAAS;gBACT;;oBAEI,SAAS;gBACb;YACJ;QACJ;IACJ;AACJ;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,OAAO;IACP,aAAa;IACb,kBAAkB;IAClB,eAAe;IACf,aAAa;IACb,sBAAsB;IACtB,SAAS;;IAET;QACI,mBAAmB;QACnB,aAAa;QACb,eAAe;QACf,sBAAsB;;QAEtB;YACI,gBAAgB;YAChB,uBAAuB;YACvB,mBAAmB;QACvB;IACJ;AACJ;;AAEA;IACI;QACI,sBAAsB;IAC1B;;IAEA;QACI,eAAe;QACf,6BAA6B;IACjC;;IAEA;QACI,aAAa;IACjB;AACJ",sourcesContent:['@import url("https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.min.css");\n\nmain {\n    width: 100vw;\n    min-height: 100vh;\n    display: flex;\n}\n\n.nav-menu {\n    display: flex;\n    flex-direction: column;\n    min-width: 360px;\n    max-width: 400px;\n    padding: 2rem;\n    justify-content: start;\n\n    h1 {\n        align-self: center;\n    }\n\n    .menuList {\n        display: flex;\n        flex-direction: column;\n        align-items: start;\n\n        li {\n            a {\n                display: flex;\n                align-items: center;\n                gap: 1rem;\n                justify-content: start;\n\n                img {\n                    width: 1.5rem;\n                }\n            }\n        }\n    }\n\n    #projectList {\n        display: flex;\n        width: 100%;\n        align-items: center;\n        justify-content: center;\n        flex-direction: column;\n    }\n}\n\n.line {\n    background-color: #969ea6;\n    width: 1px;\n    flex: 0 0 1;\n}\n\ndialog {\n    form {\n        article {\n            footer {\n                display: flex;\n                align-items: center;\n                gap: 1rem;\n                #comfirmBtn,\n                #comfirmBtnProject {\n                    margin: 0;\n                }\n            }\n        }\n    }\n}\n\n.invalid {\n    border: 2px solid red;\n}\n\n.content {\n    flex: 1;\n    padding: 2rem;\n    overflow-x: hidden;\n    max-width: 100%;\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n\n    .task {\n        border-radius: 10px;\n        padding: 1rem;\n        max-width: 100%;\n        box-sizing: border-box;\n\n        .taskDesc {\n            overflow: hidden;\n            text-overflow: ellipsis;\n            white-space: nowrap;\n        }\n    }\n}\n\n@media (max-width: 768px) {\n    main {\n        flex-direction: column;\n    }\n\n    .nav-menu {\n        max-width: 100%;\n        border-bottom: 1px solid #ccc;\n    }\n\n    .line {\n        display: none;\n    }\n}\n'],sourceRoot:""}]);const i=s},314:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n}).join("")},t.i=function(e,n,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var s={};if(r)for(var i=0;i<this.length;i++){var c=this[i][0];null!=c&&(s[c]=!0)}for(var d=0;d<e.length;d++){var l=[].concat(e[d]);r&&s[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),t.push(l))}},t}},354:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},540:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},659:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={id:r,exports:{}};return e[r](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0;var r=n(72),o=n.n(r),a=n(825),s=n.n(a),i=n(659),c=n.n(i),d=n(56),l=n.n(d),A=n(540),u=n.n(A),p=n(113),m=n.n(p),f=n(208),h={};h.styleTagTransform=m(),h.setAttributes=l(),h.insert=c().bind(null,"head"),h.domAPI=s(),h.insertStyleElement=u(),o()(f.A,h),f.A&&f.A.locals&&f.A.locals;const g={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};let B;const v=new Uint8Array(16),y=[];for(let e=0;e<256;++e)y.push((e+256).toString(16).slice(1));function I(e,t,n){const r=(e=e||{}).random??e.rng?.()??function(){if(!B){if("undefined"==typeof crypto||!crypto.getRandomValues)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");B=crypto.getRandomValues.bind(crypto)}return B(v)}();if(r.length<16)throw new Error("Random bytes length must be >= 16");if(r[6]=15&r[6]|64,r[8]=63&r[8]|128,t){if((n=n||0)<0||n+16>t.length)throw new RangeError(`UUID byte range ${n}:${n+15} is out of buffer bounds`);for(let e=0;e<16;++e)t[n+e]=r[e];return t}return function(e,t=0){return(y[e[t+0]]+y[e[t+1]]+y[e[t+2]]+y[e[t+3]]+"-"+y[e[t+4]]+y[e[t+5]]+"-"+y[e[t+6]]+y[e[t+7]]+"-"+y[e[t+8]]+y[e[t+9]]+"-"+y[e[t+10]]+y[e[t+11]]+y[e[t+12]]+y[e[t+13]]+y[e[t+14]]+y[e[t+15]]).toLowerCase()}(r)}const C=function(e,t,n){return!g.randomUUID||t||e?I(e,t,n):g.randomUUID()};class x{constructor(e,t,n,r=null){this.id=C(),this.title=e,this.description=t,this.deadline=n,this.status=!0,this.project=r}}class k{constructor(){this.taskStorage=[]}addTask(e,t,n,r){this.taskStorage.push(new x(e,t,n,r))}changeStatus(e){const t=this.taskStorage.find(t=>t.id===e);t.status=!t.status}}class j{constructor(e){this.name=e,this.id=C()}}class w{constructor(){this.projectStorage=[]}addProject(e){this.projectStorage.push(new j(e))}}class E{loadTasks(){throw new Error("Not implemented")}saveTasks(){throw new Error("Not implemented")}getTaskById(){throw new Error("Not implemented")}deleteTaskById(){throw new Error("Not implemented")}setTaskById(){throw new Error("Not implemented")}}class b extends E{constructor(e,t){super(),this.projects=t,this.objToDo=e}loadTasks(){null!==JSON.parse(localStorage.getItem("allTasks"))&&(this.objToDo.taskStorage=JSON.parse(localStorage.getItem("allTasks")))}saveTasks(){localStorage.setItem("allTasks",JSON.stringify(this.objToDo.taskStorage))}getTaskById(){return this.objToDo.taskStorage.find(e=>{e.id,id})}setTaskById(e,t){const n=this.objToDo.taskStorage.findIndex(e=>{e.id});this.objToDo.taskStorage[n]=t}loadProject(){null!==JSON.parse(localStorage.getItem("allProject"))&&(this.projects.projectStorage=JSON.parse(localStorage.getItem("allProject")))}saveProject(){localStorage.setItem("allProject",JSON.stringify(this.projects.projectStorage))}}(new class{constructor(){this.projects=new w,this.todo=new k,this.storage=new b(this.todo,this.projects)}addEvent(){const e=document.getElementById("createBtn"),t=document.querySelector(".createTaskModal"),n=document.getElementById("closeModal"),r=document.querySelector("#tsk"),o=document.getElementById("completedTasks"),a=document.getElementById("todoTasks"),s=document.getElementById("allTasks"),i=document.getElementById("createProject"),c=document.querySelector(".createProjectModal"),d=document.getElementById("closeModalProject"),l=document.querySelector("#prj");r.addEventListener("submit",e=>{e.preventDefault();let n=!0;const o=new FormData(r);r.querySelectorAll("input, textarea, select").forEach(e=>{e.value?e.classList.remove("invalid"):(e.classList.add("invalid"),n=!1)}),n&&(this.todo.addTask(o.get("taskName"),o.get("taskDesc"),o.get("date"),o.get("taskProject")),this.storage.saveTasks(),this.renderTasks(!0),r.reset(),t.close())}),e.addEventListener("click",()=>{t.showModal()}),n.addEventListener("click",()=>{t.close()}),d.addEventListener("click",()=>{c.close()}),o.addEventListener("click",e=>{e.preventDefault(),this.renderTasks(!1)}),a.addEventListener("click",e=>{e.preventDefault(),this.renderTasks(!0)}),s.addEventListener("click",e=>{e.preventDefault(),this.renderTasks(null)}),i.addEventListener("click",()=>{c.showModal()}),l.addEventListener("submit",e=>{e.preventDefault();let t=!0;const n=new FormData(l);l.querySelectorAll("input").forEach(e=>{e.value?e.classList.remove("invalid"):(e.classList.add("invalid"),t=!1)}),t&&(this.projects.addProject(n.get("projectName")),this.storage.saveProject(),this.renderProject(),l.reset(),c.close())})}renderTasks(e){document.getElementById("task-container").innerHTML="",this.storage.loadTasks(),this.todo.taskStorage.forEach(t=>{t.status!==e&&null!==e||this.createTaskOnPage(t)})}renderProject(){document.getElementById("projectList").innerHTML="",document.getElementById("projectSelect").innerHTML='<option selected value="null">Select project...</option>',this.storage.loadProject(),this.projects.projectStorage.forEach(e=>{let t=document.createElement("li");t.innerHTML=`<a href="#">${e.name}</a>`,t.id=e.id,t.addEventListener("click",t=>{document.getElementById("task-container").innerHTML="",t.preventDefault(),console.log(e.name),this.todo.taskStorage.forEach(t=>{t.project===e.id&&this.createTaskOnPage(t)})}),document.getElementById("projectList").append(t);let n=document.createElement("option");n.value=e.id,n.textContent=e.name,document.getElementById("projectSelect").append(n)})}createTaskOnPage(e){const t=this;let n=document.createElement("article");n.innerHTML=`<input type="checkbox" name="taskStatus" id="${e.id}" ${!1===e.status?"checked":""}/>\n      <label>\n          <h3 class="taskHeader">${e.title}</h3>\n      </label>\n      <div class="taskTextContent">\n          <p class="taskDesc">${e.description}</p>\n      </div>`,n.className="task",document.getElementById("task-container").append(n),document.getElementById(e.id).addEventListener("change",function(){this.checked?(e.status=!1,t.storage.saveTasks()):(e.status=!0,t.storage.saveTasks()),t.storage.setTaskById(e.id,e)})}init(){this.renderTasks(!0),this.renderProject(),this.addEvent()}}).init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,