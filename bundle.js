(()=>{"use strict";var t={56:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},72:t=>{var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var a={},s=[],i=0;i<t.length;i++){var c=t[i],l=r.base?c[0]+r.base:c[0],d=a[l]||0,u="".concat(l," ").concat(d);a[l]=d+1;var p=n(u),A={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)e[p].references++,e[p].updater(A);else{var m=o(A,r);r.byIndex=i,e.splice(i,0,{identifier:u,updater:m,references:1})}s.push(u)}return s}function o(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,o){var a=r(t=t||[],o=o||{});return function(t){t=t||[];for(var s=0;s<a.length;s++){var i=n(a[s]);e[i].references--}for(var c=r(t,o),l=0;l<a.length;l++){var d=n(a[l]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}a=c}}},113:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}},208:(t,e,n)=>{n.d(e,{A:()=>i});var r=n(354),o=n.n(r),a=n(314),s=n.n(a)()(o());s.push([t.id,"@import url(https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.min.css);"]),s.push([t.id,"main {\n    min-height: 100vh;\n    display: flex;\n}\n\n.nav-menu {\n    display: flex;\n    flex-direction: column;\n    min-width: 360px;\n    max-width: 400px;\n    padding: 2rem;\n    justify-content: start;\n\n    h1 {\n        align-self: center;\n    }\n\n    .menuList {\n        display: flex;\n        flex-direction: column;\n        align-items: start;\n\n        li {\n            a {\n                display: flex;\n                align-items: center;\n                gap: 1rem;\n                justify-content: start;\n\n                img {\n                    width: 1.5rem;\n                }\n            }\n        }\n    }\n\n    .projectList {\n        display: flex;\n        justify-content: center;\n    }\n}\n\n.line {\n    background-color: #969ea6;\n    width: 1px;\n    flex: 0 0 1;\n}\n\ndialog {\n    form {\n        article {\n            footer {\n                display: flex;\n                align-items: center;\n                gap: 1rem;\n                #comfirmBtn {\n                    margin: 0;\n                }\n            }\n        }\n    }\n}\n\n.invalid {\n    border: 2px solid red;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAEA;IACI,iBAAiB;IACjB,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,gBAAgB;IAChB,gBAAgB;IAChB,aAAa;IACb,sBAAsB;;IAEtB;QACI,kBAAkB;IACtB;;IAEA;QACI,aAAa;QACb,sBAAsB;QACtB,kBAAkB;;QAElB;YACI;gBACI,aAAa;gBACb,mBAAmB;gBACnB,SAAS;gBACT,sBAAsB;;gBAEtB;oBACI,aAAa;gBACjB;YACJ;QACJ;IACJ;;IAEA;QACI,aAAa;QACb,uBAAuB;IAC3B;AACJ;;AAEA;IACI,yBAAyB;IACzB,UAAU;IACV,WAAW;AACf;;AAEA;IACI;QACI;YACI;gBACI,aAAa;gBACb,mBAAmB;gBACnB,SAAS;gBACT;oBACI,SAAS;gBACb;YACJ;QACJ;IACJ;AACJ;;AAEA;IACI,qBAAqB;AACzB",sourcesContent:['@import url("https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.min.css");\n\nmain {\n    min-height: 100vh;\n    display: flex;\n}\n\n.nav-menu {\n    display: flex;\n    flex-direction: column;\n    min-width: 360px;\n    max-width: 400px;\n    padding: 2rem;\n    justify-content: start;\n\n    h1 {\n        align-self: center;\n    }\n\n    .menuList {\n        display: flex;\n        flex-direction: column;\n        align-items: start;\n\n        li {\n            a {\n                display: flex;\n                align-items: center;\n                gap: 1rem;\n                justify-content: start;\n\n                img {\n                    width: 1.5rem;\n                }\n            }\n        }\n    }\n\n    .projectList {\n        display: flex;\n        justify-content: center;\n    }\n}\n\n.line {\n    background-color: #969ea6;\n    width: 1px;\n    flex: 0 0 1;\n}\n\ndialog {\n    form {\n        article {\n            footer {\n                display: flex;\n                align-items: center;\n                gap: 1rem;\n                #comfirmBtn {\n                    margin: 0;\n                }\n            }\n        }\n    }\n}\n\n.invalid {\n    border: 2px solid red;\n}\n'],sourceRoot:""}]);const i=s},314:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map(function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n}).join("")},e.i=function(t,n,r,o,a){"string"==typeof t&&(t=[[null,t,void 0]]);var s={};if(r)for(var i=0;i<this.length;i++){var c=this[i][0];null!=c&&(s[c]=!0)}for(var l=0;l<t.length;l++){var d=[].concat(t[l]);r&&s[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),e.push(d))}},e}},354:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},540:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},659:t=>{var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},825:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return t[r](a,a.exports,n),a.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.nc=void 0;var r=n(72),o=n.n(r),a=n(825),s=n.n(a),i=n(659),c=n.n(i),l=n(56),d=n.n(l),u=n(540),p=n.n(u),A=n(113),m=n.n(A),f=n(208),g={};g.styleTagTransform=m(),g.setAttributes=d(),g.insert=c().bind(null,"head"),g.domAPI=s(),g.insertStyleElement=p(),o()(f.A,g),f.A&&f.A.locals&&f.A.locals;const h={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};let y;const v=new Uint8Array(16),B=[];for(let t=0;t<256;++t)B.push((t+256).toString(16).slice(1));function I(t,e,n){const r=(t=t||{}).random??t.rng?.()??function(){if(!y){if("undefined"==typeof crypto||!crypto.getRandomValues)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");y=crypto.getRandomValues.bind(crypto)}return y(v)}();if(r.length<16)throw new Error("Random bytes length must be >= 16");if(r[6]=15&r[6]|64,r[8]=63&r[8]|128,e){if((n=n||0)<0||n+16>e.length)throw new RangeError(`UUID byte range ${n}:${n+15} is out of buffer bounds`);for(let t=0;t<16;++t)e[n+t]=r[t];return e}return function(t,e=0){return(B[t[e+0]]+B[t[e+1]]+B[t[e+2]]+B[t[e+3]]+"-"+B[t[e+4]]+B[t[e+5]]+"-"+B[t[e+6]]+B[t[e+7]]+"-"+B[t[e+8]]+B[t[e+9]]+"-"+B[t[e+10]]+B[t[e+11]]+B[t[e+12]]+B[t[e+13]]+B[t[e+14]]+B[t[e+15]]).toLowerCase()}(r)}class C{constructor(t,e,n,r=null){this.id=function(t,e,n){return!h.randomUUID||e||t?I(t,e,n):h.randomUUID()}(),this.title=t,this.description=e,this.deadline=n,this.status=!0,this.project=r}}class k{constructor(){this.taskStorage=[]}addTask(t,e,n,r){this.taskStorage.push(new C(t,e,n,r))}changeStatus(t){const e=this.taskStorage.find(e=>e.id===t);e.status=!e.status}}class x{getAllTasks(){throw new Error("Not implemented")}getAllTasksToVirtualStorage(){throw new Error("Not implemented")}getTaskById(){throw new Error("Not implemented")}deleteTaskById(){throw new Error("Not implemented")}setTaskById(){throw new Error("Not implemented")}}class b extends x{constructor(t){super(),this.objToDo=t}getAllTasksToVirtualStorage(){this.objToDo.taskStorage=[];for(let t=0;t<localStorage.length;t++){const e=localStorage.key(t),n=localStorage.getItem(e);try{this.objToDo.taskStorage.push(JSON.parse(n))}catch(t){console.error(`Помилка при парсингу ключа ${e}:`,t)}}}addAllTask(){this.objToDo.taskStorage.forEach(t=>{localStorage.setItem(t.id,JSON.stringify(t))})}getTaskById(t){return JSON.parse(localStorage.getItem(t))}deleteTaskById(){throw new Error("Not implemented")}setTaskById(t,e){localStorage.setItem(t,JSON.stringify(e))}}(new class{constructor(){this.todo=new k,this.storage=new b(this.todo)}addEvent(){const t=document.getElementById("createBtn"),e=document.querySelector("dialog"),n=document.getElementById("closeModal"),r=document.querySelector("form");r.addEventListener("submit",t=>{t.preventDefault();let e=!0;const o=new FormData(r);r.querySelectorAll("input, textarea, select").forEach(t=>{t.value?t.classList.remove("invalid"):(t.classList.add("invalid"),e=!1)}),e&&(console.log("Форма валідна, можна сабмітити через JS"),this.todo.addTask(o.get("taskName"),o.get("taskDesc"),o.get("date"),o.get("taskProject")),this.storage.addAllTask(),this.uploadTaskToPage(),r.reset(),n.click())}),t.addEventListener("click",()=>{e.showModal()}),n.addEventListener("click",()=>{e.close()})}uploadTaskToPage(){const t=this;this.storage.getAllTasksToVirtualStorage(),this.todo.taskStorage.forEach(e=>{if(!0===e.status){let n=document.createElement("article");n.innerHTML=`<input type="checkbox" name="taskStatus" id="${e.id}">\n         <div class="taskTextContent">\n           <h3 class="taskHeader">${e.title}</h3>\n           <p class="taskDesc">${e.description}</p>\n         </div>`,n.className="task",document.getElementById("task-container").append(n),document.getElementById(e.id).addEventListener("change",function(){this.checked?(e.status=!1,console.log("Checkbox is checked!")):(e.status=!0,console.log("Checkbox is unchecked!")),!1===e.status&&document.getElementById(e.id).parentElement.remove(),t.storage.setTaskById(e.id,e)})}})}init(){this.addEvent()}}).init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,