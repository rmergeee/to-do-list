(()=>{"use strict";var e={56:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},72:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var a={},s=[],i=0;i<e.length;i++){var c=e[i],d=r.base?c[0]+r.base:c[0],l=a[d]||0,A="".concat(d," ").concat(l);a[d]=l+1;var u=t(A),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)n[u].references++,n[u].updater(p);else{var m=o(p,r);r.byIndex=i,n.splice(i,0,{identifier:A,updater:m,references:1})}s.push(A)}return s}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var s=0;s<a.length;s++){var i=t(a[s]);n[i].references--}for(var c=r(e,o),d=0;d<a.length;d++){var l=t(a[d]);0===n[l].references&&(n[l].updater(),n.splice(l,1))}a=c}}},113:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},208:(e,n,t)=>{t.d(n,{A:()=>i});var r=t(354),o=t.n(r),a=t(314),s=t.n(a)()(o());s.push([e.id,"@import url(https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.min.css);"]),s.push([e.id,"main {\n    width: 100vw;\n    min-height: 100vh;\n    display: flex;\n}\n\n.nav-menu {\n    display: flex;\n    flex-direction: column;\n    min-width: 360px;\n    max-width: 400px;\n    padding: 2rem;\n    justify-content: start;\n\n    h1 {\n        align-self: center;\n    }\n\n    .menuList {\n        display: flex;\n        flex-direction: column;\n        align-items: start;\n\n        li {\n            a {\n                display: flex;\n                align-items: center;\n                gap: 1rem;\n                justify-content: start;\n\n                img {\n                    width: 1.5rem;\n                }\n            }\n        }\n    }\n\n    #projectList {\n        display: flex;\n        width: 100%;\n        align-items: center;\n        justify-content: center;\n        flex-direction: column;\n    }\n}\n\n.line {\n    background-color: #969ea6;\n    width: 1px;\n    flex: 0 0 1;\n}\n\ndialog {\n    form {\n        article {\n            footer {\n                display: flex;\n                align-items: center;\n                gap: 1rem;\n                #comfirmBtn {\n                    margin: 0;\n                }\n            }\n        }\n    }\n}\n\n.invalid {\n    border: 2px solid red;\n}\n\n.content {\n    flex: 1;\n    padding: 2rem;\n    overflow-x: hidden;\n    max-width: 100%;\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n\n    .task {\n        border-radius: 10px;\n        padding: 1rem;\n        max-width: 100%;\n        box-sizing: border-box;\n\n        .taskDesc {\n            overflow: hidden;\n            text-overflow: ellipsis;\n            white-space: nowrap;\n        }\n    }\n}\n\n@media (max-width: 768px) {\n    main {\n        flex-direction: column;\n    }\n\n    .nav-menu {\n        max-width: 100%;\n        border-bottom: 1px solid #ccc;\n    }\n\n    .line {\n        display: none;\n    }\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAEA;IACI,YAAY;IACZ,iBAAiB;IACjB,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,gBAAgB;IAChB,gBAAgB;IAChB,aAAa;IACb,sBAAsB;;IAEtB;QACI,kBAAkB;IACtB;;IAEA;QACI,aAAa;QACb,sBAAsB;QACtB,kBAAkB;;QAElB;YACI;gBACI,aAAa;gBACb,mBAAmB;gBACnB,SAAS;gBACT,sBAAsB;;gBAEtB;oBACI,aAAa;gBACjB;YACJ;QACJ;IACJ;;IAEA;QACI,aAAa;QACb,WAAW;QACX,mBAAmB;QACnB,uBAAuB;QACvB,sBAAsB;IAC1B;AACJ;;AAEA;IACI,yBAAyB;IACzB,UAAU;IACV,WAAW;AACf;;AAEA;IACI;QACI;YACI;gBACI,aAAa;gBACb,mBAAmB;gBACnB,SAAS;gBACT;oBACI,SAAS;gBACb;YACJ;QACJ;IACJ;AACJ;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,OAAO;IACP,aAAa;IACb,kBAAkB;IAClB,eAAe;IACf,aAAa;IACb,sBAAsB;IACtB,SAAS;;IAET;QACI,mBAAmB;QACnB,aAAa;QACb,eAAe;QACf,sBAAsB;;QAEtB;YACI,gBAAgB;YAChB,uBAAuB;YACvB,mBAAmB;QACvB;IACJ;AACJ;;AAEA;IACI;QACI,sBAAsB;IAC1B;;IAEA;QACI,eAAe;QACf,6BAA6B;IACjC;;IAEA;QACI,aAAa;IACjB;AACJ",sourcesContent:['@import url("https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.min.css");\n\nmain {\n    width: 100vw;\n    min-height: 100vh;\n    display: flex;\n}\n\n.nav-menu {\n    display: flex;\n    flex-direction: column;\n    min-width: 360px;\n    max-width: 400px;\n    padding: 2rem;\n    justify-content: start;\n\n    h1 {\n        align-self: center;\n    }\n\n    .menuList {\n        display: flex;\n        flex-direction: column;\n        align-items: start;\n\n        li {\n            a {\n                display: flex;\n                align-items: center;\n                gap: 1rem;\n                justify-content: start;\n\n                img {\n                    width: 1.5rem;\n                }\n            }\n        }\n    }\n\n    #projectList {\n        display: flex;\n        width: 100%;\n        align-items: center;\n        justify-content: center;\n        flex-direction: column;\n    }\n}\n\n.line {\n    background-color: #969ea6;\n    width: 1px;\n    flex: 0 0 1;\n}\n\ndialog {\n    form {\n        article {\n            footer {\n                display: flex;\n                align-items: center;\n                gap: 1rem;\n                #comfirmBtn {\n                    margin: 0;\n                }\n            }\n        }\n    }\n}\n\n.invalid {\n    border: 2px solid red;\n}\n\n.content {\n    flex: 1;\n    padding: 2rem;\n    overflow-x: hidden;\n    max-width: 100%;\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n\n    .task {\n        border-radius: 10px;\n        padding: 1rem;\n        max-width: 100%;\n        box-sizing: border-box;\n\n        .taskDesc {\n            overflow: hidden;\n            text-overflow: ellipsis;\n            white-space: nowrap;\n        }\n    }\n}\n\n@media (max-width: 768px) {\n    main {\n        flex-direction: column;\n    }\n\n    .nav-menu {\n        max-width: 100%;\n        border-bottom: 1px solid #ccc;\n    }\n\n    .line {\n        display: none;\n    }\n}\n'],sourceRoot:""}]);const i=s},314:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map(function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t}).join("")},n.i=function(e,t,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var s={};if(r)for(var i=0;i<this.length;i++){var c=this[i][0];null!=c&&(s[c]=!0)}for(var d=0;d<e.length;d++){var l=[].concat(e[d]);r&&s[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),n.push(l))}},n}},354:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[n].concat([a]).join("\n")}return[n].join("\n")}},540:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},659:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var a=n[r]={id:r,exports:{}};return e[r](a,a.exports,t),a.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nc=void 0;var r=t(72),o=t.n(r),a=t(825),s=t.n(a),i=t(659),c=t.n(i),d=t(56),l=t.n(d),A=t(540),u=t.n(A),p=t(113),m=t.n(p),f=t(208),h={};h.styleTagTransform=m(),h.setAttributes=l(),h.insert=c().bind(null,"head"),h.domAPI=s(),h.insertStyleElement=u(),o()(f.A,h),f.A&&f.A.locals&&f.A.locals;const g={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};let B;const v=new Uint8Array(16),y=[];for(let e=0;e<256;++e)y.push((e+256).toString(16).slice(1));function I(e,n,t){const r=(e=e||{}).random??e.rng?.()??function(){if(!B){if("undefined"==typeof crypto||!crypto.getRandomValues)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");B=crypto.getRandomValues.bind(crypto)}return B(v)}();if(r.length<16)throw new Error("Random bytes length must be >= 16");if(r[6]=15&r[6]|64,r[8]=63&r[8]|128,n){if((t=t||0)<0||t+16>n.length)throw new RangeError(`UUID byte range ${t}:${t+15} is out of buffer bounds`);for(let e=0;e<16;++e)n[t+e]=r[e];return n}return function(e,n=0){return(y[e[n+0]]+y[e[n+1]]+y[e[n+2]]+y[e[n+3]]+"-"+y[e[n+4]]+y[e[n+5]]+"-"+y[e[n+6]]+y[e[n+7]]+"-"+y[e[n+8]]+y[e[n+9]]+"-"+y[e[n+10]]+y[e[n+11]]+y[e[n+12]]+y[e[n+13]]+y[e[n+14]]+y[e[n+15]]).toLowerCase()}(r)}const C=function(e,n,t){return!g.randomUUID||n||e?I(e,n,t):g.randomUUID()};class x{constructor(e,n,t,r=null){this.id=C(),this.title=e,this.description=n,this.deadline=t,this.status=!0,this.project=r}}class k{constructor(){this.taskStorage=[]}addTask(e,n,t,r){this.taskStorage.push(new x(e,n,t,r))}changeStatus(e){const n=this.taskStorage.find(n=>n.id===e);n.status=!n.status}}class w{constructor(e){this.name=e,this.id=C()}}class b{constructor(){this.projectStorage=[]}addProject(e){this.projectStorage.push(new w(e))}}class E{loadTasks(){throw new Error("Not implemented")}saveTasks(){throw new Error("Not implemented")}getTaskById(){throw new Error("Not implemented")}deleteTaskById(){throw new Error("Not implemented")}setTaskById(){throw new Error("Not implemented")}}class j extends E{constructor(e,n){super(),this.projects=n,this.objToDo=e}loadTasks(){null!==JSON.parse(localStorage.getItem("allTasks"))&&(this.objToDo.taskStorage=JSON.parse(localStorage.getItem("allTasks")))}saveTasks(){localStorage.setItem("allTasks",JSON.stringify(this.objToDo.taskStorage))}getTaskById(){return this.objToDo.taskStorage.find(e=>{e.id,id})}setTaskById(e,n){const t=this.objToDo.taskStorage.findIndex(e=>{e.id});this.objToDo.taskStorage[t]=n}loadProject(){null!==JSON.parse(localStorage.getItem("allProject"))&&(this.projects.projectStorage=JSON.parse(localStorage.getItem("allProject")))}saveProject(){localStorage.setItem("allProject",JSON.stringify(this.projects.projectStorage))}}(new class{constructor(){this.projects=new b,this.todo=new k,this.storage=new j(this.todo,this.projects)}addEvent(){const e=document.getElementById("createBtn"),n=document.querySelector(".createTaskModal"),t=document.getElementById("closeModal"),r=document.querySelector("#tsk"),o=document.getElementById("completedTasks"),a=document.getElementById("todoTasks"),s=document.getElementById("allTasks"),i=document.getElementById("createProject"),c=document.querySelector(".createProjectModal"),d=document.getElementById("closeModalProject"),l=document.querySelector("#prj");r.addEventListener("submit",e=>{e.preventDefault();let t=!0;const o=new FormData(r);r.querySelectorAll("input, textarea, select").forEach(e=>{e.value?e.classList.remove("invalid"):(e.classList.add("invalid"),t=!1)}),t&&(this.todo.addTask(o.get("taskName"),o.get("taskDesc"),o.get("date"),o.get("taskProject")),this.storage.saveTasks(),this.renderTasks(!0),r.reset(),n.close())}),e.addEventListener("click",()=>{n.showModal()}),t.addEventListener("click",()=>{n.close()}),d.addEventListener("click",()=>{c.close()}),o.addEventListener("click",e=>{e.preventDefault(),this.renderTasks(!1)}),a.addEventListener("click",e=>{e.preventDefault(),this.renderTasks(!0)}),s.addEventListener("click",e=>{e.preventDefault(),this.renderTasks(null)}),i.addEventListener("click",()=>{c.showModal()}),l.addEventListener("submit",e=>{e.preventDefault();let n=!0;const t=new FormData(l);l.querySelectorAll("input").forEach(e=>{e.value?e.classList.remove("invalid"):(e.classList.add("invalid"),n=!1)}),n&&(this.projects.addProject(t.get("projectName")),this.storage.saveProject(),this.renderProject(),l.reset(),c.close())})}renderTasks(e){document.getElementById("task-container").innerHTML="",this.storage.loadTasks(),this.todo.taskStorage.forEach(n=>{n.status!==e&&null!==e||this.createTaskOnPage(n)})}renderProject(){document.getElementById("projectList").innerHTML="",this.storage.loadProject(),this.projects.projectStorage.forEach(e=>{let n=document.createElement("li");n.innerHTML=`<a href="#">${e.name}</a>`,n.id=e.id,n.addEventListener("click",n=>{document.getElementById("task-container").innerHTML="",n.preventDefault(),console.log(e.name),this.todo.taskStorage.forEach(n=>{n.project===e.id&&this.createTaskOnPage(n)})}),document.getElementById("projectList").append(n);let t=document.createElement("option");t.value=e.id,t.textContent=e.name,document.getElementById("projectSelect").append(t)})}createTaskOnPage(e){const n=this;let t=document.createElement("article");t.innerHTML=`<input type="checkbox" name="taskStatus" id="${e.id}" ${!1===e.status?"checked":""}/>\n      <label>\n          <h3 class="taskHeader">${e.title}</h3>\n      </label>\n      <div class="taskTextContent">\n          <p class="taskDesc">${e.description}</p>\n      </div>`,t.className="task",document.getElementById("task-container").append(t),document.getElementById(e.id).addEventListener("change",function(){this.checked?(e.status=!1,n.storage.saveTasks()):(e.status=!0,n.storage.saveTasks()),n.storage.setTaskById(e.id,e)})}init(){this.renderTasks(!0),this.renderProject(),this.addEvent()}}).init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,